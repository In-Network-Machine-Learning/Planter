########################################################################
# THIS FILE IS PART OF Planter PROJECT
# Copyright (c) Changgang Zheng and Computing Infrastructure Group
# Department of Engineering Science, University of Oxford
# All rights reserved.
# E-mail: changgang.zheng@eng.ox.ac.uk or changgangzheng@qq.com
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at :
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#########################################################################
# This file was autogenerated

import json
import os
import binascii
import sys
sys.path.append('/Users/Planter')
os.chdir('/Users/Planter')
print('working dir: ' + os.getcwd())
table = json.load(open('./Tables/Ternary_Table.json','r'))
Planter_config = json.load(open('./src/configs/Planter_config.json','r'))
config = Planter_config['p4 config']

Ingress = bfrt.DT_performance_Iris.pipe.SwitchIngress
Ingress.clear()

def ten_to_bin(num, count):
    num = bin(num).lstrip('0b')
    if len(num) != count:
        cont = count - len(num)
        num = cont * '0' + num
    return num

print('load feature 0 table with',len(table['feature 0'].keys()),'entries')
for k in range(len(table['feature 0'].keys())):
    key = str(k)
    codes = ''
    codes = ten_to_bin(int(table['feature 0'][key][2]), int(config['width of code'][0])) + codes
    Ingress.lookup_feature0.add_with_extract_feature0(table['feature 0'][key][1], table['feature 0'][key][0], int(key), int(codes,2))
print('load feature 1 table with',len(table['feature 1'].keys()),'entries')
for k in range(len(table['feature 1'].keys())):
    key = str(k)
    codes = ''
    codes = ten_to_bin(int(table['feature 1'][key][2]), int(config['width of code'][1])) + codes
    Ingress.lookup_feature1.add_with_extract_feature1(table['feature 1'][key][1], table['feature 1'][key][0], int(key), int(codes,2))
print('load feature 2 table with',len(table['feature 2'].keys()),'entries')
for k in range(len(table['feature 2'].keys())):
    key = str(k)
    codes = ''
    codes = ten_to_bin(int(table['feature 2'][key][2]), int(config['width of code'][2])) + codes
    Ingress.lookup_feature2.add_with_extract_feature2(table['feature 2'][key][1], table['feature 2'][key][0], int(key), int(codes,2))
print('load feature 3 table with',len(table['feature 3'].keys()),'entries')
for k in range(len(table['feature 3'].keys())):
    key = str(k)
    codes = ''
    codes = ten_to_bin(int(table['feature 3'][key][2]), int(config['width of code'][3])) + codes
    Ingress.lookup_feature3.add_with_extract_feature3(table['feature 3'][key][1], table['feature 3'][key][0], int(key), int(codes,2))
print('load tree (code/code to vote) table with',len(table['code to vote'].keys()),'entries')
for key in table['code to vote']:
    Ingress.decision.add_with_read_lable(table['code to vote'][key]['f0 code'], table['code to vote'][key]['f1 code'], table['code to vote'][key]['f2 code'], table['code to vote'][key]['f3 code'],  int(table['code to vote'][key]['leaf']))
