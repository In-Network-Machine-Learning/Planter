########################################################################
# THIS FILE IS PART OF Planter PROJECT
# Copyright (c) Changgang Zheng and Computing Infrastructure Group
# Department of Engineering Science, University of Oxford
# All rights reserved.
# E-mail: changgang.zheng@eng.ox.ac.uk or changgangzheng@qq.com
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at :
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#########################################################################
# This file was autogenerated

import json
import numpy as np
from scapy.all import *
from sklearn.metrics import *
from multiprocessing import *
import readline
import time
import os
print('Predicted load table time ... (0.071s)')
time.sleep(0.071)
class Planter(Packet):
    name = 'Planter'
    fields_desc = [StrFixedLenField('P', 'P', length=1),
        StrFixedLenField('Four', '4', length=1),
        XByteField('version', 0x01),
        XByteField('type', 0x01),
        IntField('feature0', 0),
        IntField('feature1', 0),
        IntField('feature2', 0),
        IntField('feature3', 0),
        IntField('result', 0xDEADBABE)]

bind_layers(Ether, Planter, type=0x1234)

config_file = '/home/liam/Planter/src/temp/Test_Data.json'
Test_Data = json.load(open(config_file, 'r'))
sklearn_test_y = Test_Data['sklearn_test_y']
test_X = Test_Data['test_X']
test_y = Test_Data['test_y']

def extract(pkt):
    if pkt:
        receive_info = pkt[Planter]
        if receive_info:
            return int(receive_info.result)
        else:
            print('\rCannot find Planter header in the {}th packet |'.format(i), end='')
    else:
        print('\rDid not receive response of the {}th packet |'.format(i), end='')

print("\n==============================================================================================")
print("=        Two steps to exit Planter: 1. input 'exit', press 'return'; 2. press ctrl + c       =")
print("==============================================================================================")
print('Test the switch model, the result should be the same as previous python test')
same = 0
correct = 0
error = 0
switch_test_y = []
packets_out_pcap_reader = PcapReader('/home/liam/Planter/src/targets/alveo_u280/behavioral/test_environment/sim/test-case0/packets_out.pcap')

for i in range(np.shape(test_X)[0]):
    packet_out = packets_out_pcap_reader.next()
    received_result = extract(packet_out)

    switch_prediction = received_result
    switch_test_y += [switch_prediction]

    if switch_prediction == test_y[i]:
        correct += 1
    if switch_prediction == sklearn_test_y[i]:
        same += 1
    else:
        error += 1
    print( '\rSwitch model {}th prediction: {}, test_y: {}, with acc: {:.3}, with acc to sklearn: {:.4}, with error: {:.4}, M/A format macro f1: {:.4}, macro f1: {:.4}'.format(i+1, switch_prediction, test_y[i], correct / (i + 1), same / (i + 1), error / (i + 1), accuracy_score(switch_test_y[:i+1], test_y[:i+1]), accuracy_score(sklearn_test_y[:i+1], test_y[:i+1])), end='')
result = classification_report(switch_test_y, test_y, digits=4)
print('\n\n', result)
print("======================================= Test Finished ========================================")
